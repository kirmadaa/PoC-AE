name: Automated Vulnerability Remediation

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  trivy_scan_and_fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      security-events: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for git-auto-commit

      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # - name: Install Dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y wget docker.io

      - name: Install Trivy
        run: |
          TRIVY_VERSION=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
          wget https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.deb
          sudo dpkg -i trivy_${TRIVY_VERSION}_Linux-64bit.deb

      - name: Build Docker Image
        run: |
          docker build -t myapp:latest .

      - name: Run Trivy Scans
        run: |
          trivy fs . --format json --output trivy-fs-report.json
          trivy config . --format json --output trivy-config-report.json
          trivy image myapp:latest --format json --output trivy-image-report.json

      - name: Run Remediation Script
        run: |
          python .github/scripts/remediate_pipeline_poc.py \
            --go-report trivy-fs-report.json \
            --docker-report trivy-config-report.json \
            --image-report trivy-image-report.json

      - name: Commit & Push Changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Auto-remediated vulnerabilities using Trivy suggestions"
          commit_user_name: "Security Bot"
          commit_user_email: "security@example.com"
      - name: Run Trivy file system scan
        run: trivy fs . --format sarif --output trivy-fs-final.sarif
        # Ensure this step always runs and check its output in logs

      - name: Run Trivy misconfiguration scan (for Dockerfile)
        # Assuming Dockerfile exists in the root of the repo
        run: |
          if [ -f "Dockerfile" ]; then
            echo "Dockerfile found, running Trivy config scan..."
            trivy config Dockerfile --format sarif --output trivy-config-final.sarif
          else
            echo "Dockerfile not found, skipping Trivy config scan."
            # Create an empty but valid SARIF file if the actual file isn't generated
            echo '{"$schema": "https://docs.oasis-open.org/sarif/sarif-exchange/2.1.0/sarif-schema-2.1.0-rtm.5.json", "runs": []}' > trivy-config-final.sarif
          fi

      - name: Run Trivy image scan (example - adjust as needed)
        # This step usually follows a `docker build` step.
        # For demonstration, we'll ensure an image name is available, or create a dummy SARIF.
        run: |
          IMAGE_NAME="my-go-app:latest" # Replace with your actual image name
          if docker pull $IMAGE_NAME >/dev/null 2>&1; then # Check if image exists locally or can be pulled
            echo "Image $IMAGE_NAME found, running Trivy image scan..."
            trivy image $IMAGE_NAME --format sarif --output trivy-image-final.sarif
          else
            echo "Image $IMAGE_NAME not available for scanning. Skipping actual image scan."
            # Create an empty but valid SARIF file
            echo '{"$schema": "https://docs.oasis-open.org/sarif/sarif-exchange/2.1.0/sarif-schema-2.1.0-rtm.5.json", "runs": []}' > trivy-image-final.sarif
          fi

      - name: Debug - List generated SARIF files
        run: |
          echo "Listing SARIF files in current directory:"
          ls -l *.sarif
          echo "Content of trivy-fs-final.sarif (first 10 lines):"
          head -n 10 trivy-fs-final.sarif || true
          echo "Content of trivy-config-final.sarif (first 10 lines):"
          head -n 10 trivy-config-final.sarif || true
          echo "Content of trivy-image-final.sarif (first 10 lines):"
          head -n 10 trivy-image-final.sarif || true

      - name: Upload Trivy FS SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs-final.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      - name: Upload Trivy Config SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-config-final.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true

      - name: Upload Trivy Image SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image-final.sarif
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true
      - name: Upload SARIF files to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Use a glob pattern to upload all SARIF files.
          # Ensure all Trivy outputs are in the current directory and end with .sarif
          sarif_file: "*.sarif"
          token: ${{ secrets.GITHUB_TOKEN }}
          wait-for-processing: true
      - name: Upload Remediation Report
        uses: actions/upload-artifact@v4
        with:
          name: remediation-report
          path: remediation-report.md